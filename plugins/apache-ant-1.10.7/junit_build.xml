<project name="junit_clover" default="test" basedir=".">
    <property name="src" location=""/>
    <property name="test" location=""/>

    <property name="build.classes" location="build/main"/>
    <property name="build.testclasses" location="build/test"/>
    <property name="lib_path" value=""/>
    <property name="report.coveragedir" location="report"/>
    <property name="report.passedcoveragedir" location="${report.coveragedir}/passed"/>
    <property name="report.failedcoveragedir" location="${report.coveragedir}/failed"/>
    <property name="junit.haltonfailure" location="no"/>

    <property name="junit.jar" location="../junit-4.12.jar"/>
    <property name="hamcrest.jar" location="../hamcrest-core-1.3.jar"/>
    <property name="evosuite.jar" location="../evosuite-1.0.6.jar"/>
    <property name="clover.jar" location="./lib/clover.jar"/>


    <taskdef resource="net/sf/antcontrib/antlib.xml"/>
    <taskdef resource="com/nkt/antlib.xml"/>
    <taskdef resource="cloverlib.xml"/>

    <path id="build.classpath">
        <pathelement location="${lib_path}"/>
        <pathelement location="${build.classes}"/>
        <pathelement location="${junit.jar}"/>
        <pathelement location="${hamcrest.jar}"/>
    </path>
    <path id="testbuild.classpath">
        <path refid="build.classpath"/>
        <pathelement location="${clover.jar}"/>
        <pathelement location="${build.testclasses}"/>
        <pathelement location="${evosuite.jar}"/>
    </path>
    <target name="compile">
        <mkdir dir="${build.classes}"/>
        <javac srcdir="${src}" destdir="${build.classes}" classpathref="build.classpath" includeantruntime="false"/>
        <copy todir="${build.classes}">
            <fileset dir="${src}" excludes="**/*.java"/>
        </copy>
        <mkdir dir="${build.testclasses}"/>
        <javac srcdir="${test}" destdir="${build.testclasses}" classpathref="testbuild.classpath"
               includeantruntime="false"/>
    </target>

    <target name="test">
        <testcase-finder classpathref="testbuild.classpath" testcaseslistfileproperty='testcaseproperties.filepath'>
            <fileset dir="${build.testclasses}" casesensitive="yes">
                <include name="**/*Test.class"/>
            </fileset>
        </testcase-finder>
        <property file="${testcaseproperties.filepath}"/>
        <for list="${testcases.list}" param="testcase">
            <sequential>
                <antcall target="junit">
                    <param name="classname" value="${@{testcase}.class}"/>
                    <param name="method" value="${@{testcase}.method}"/>
                </antcall>
            </sequential>
        </for>
        <delete file="${testcaseproperties.filepath}"/>
        <spectrum-coverage-converter coveragedir="${report.passedcoveragedir}"
                                     outputPath="${report.coveragedir}/spectrum_passed_coverage.xml"/>
        <spectrum-coverage-converter coveragedir="${report.failedcoveragedir}"
                                     outputPath="${report.coveragedir}/spectrum_failed_coverage.xml"/>
    </target>
    <target name="junit">
        <echo>[Test Case] ${classname}.${method}</echo>
        <junit maxmemory="1024m" fork="yes" forkmode="once" haltonfailure="${junit.haltonfailure}" printsummary="true"
               failureproperty="test.failed">
            <classpath refid="testbuild.classpath"/>
            <test name="${classname}" methods="${method}"/>
        </junit>
        <condition property="coverage_output_dir" value="${report.failedcoveragedir}"
                   else="${report.passedcoveragedir}">
            <isset property="test.failed"/>
        </condition>
        <antcall target="clover.report">
            <param name="output_path" value="${coverage_output_dir}/${classname}.${method}.coverage.xml"/>
        </antcall>
        <delete>
            <fileset dir=".clover" includes="**/*db?*"/>
        </delete>
    </target>

    <!-- Clover targets -->
    <target name="with.clover">
        <clover-setup>
            <fileset dir="${src}" casesensitive="yes">
                <include name="**/*.java"/>
            </fileset>
        </clover-setup>
    </target>
    <target name="clean">
        <clover-clean/>
        <delete dir="${build.classes}"/>
        <delete dir="${build.testclasses}"/>
        <delete dir="${report.coveragedir}"/>
    </target>
    <target name="clover.snapshot">
        <clover-snapshot/>
    </target>
    <target name="clover.report">
        <clover-report>
            <current outfile="${output_path}" alwaysReport="true">
                <format type="xml"/>
            </current>
        </clover-report>
    </target>
    <target name="clover.all" depends="clean, with.clover, compile ,test"
            description="Runs a build with Clover and generates a Clover HTML report">
    </target>
</project>